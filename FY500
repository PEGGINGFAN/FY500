import React, { useState } from 'react';
import { View, Text, TextInput, Slider, Button, Switch, ScrollView, StyleSheet, Alert } from 'react-native';
import RNFS from 'react-native-fs';
import DocumentPicker from 'react-native-document-picker'; // Ajout pour sélectionner un fichier

const PatternCreator = () => {
  const [patternName, setPatternName] = useState('Custom Pattern');
  const [totalDuration, setTotalDuration] = useState(300);
  const [pumpEnabled, setPumpEnabled] = useState(true);
  const [pumpSquirtMl, setPumpSquirtMl] = useState(2);
  const [pumpFrequency, setPumpFrequency] = useState('per_thrust');
  const [segments, setSegments] = useState([]);

  // Ajouter un nouveau segment
  const addSegment = () => {
    setSegments([...segments, {
      speed_cm_s: 0,
      speed_cpm: 0,
      speed_percentage: 0,
      depth_cm: 0,
      depth_percentage: 0,
      duration_seconds: 15,
      random_pause_after: false,
      random_pause_duration: 5,
      pause_between: 3,
    }]);
  };

  // Supprimer un segment
  const removeSegment = (index) => {
    setSegments(segments.filter((_, i) => i !== index));
  };

  // Mettre à jour un segment
  const updateSegment = (index, field, value) => {
    const updatedSegments = [...segments];
    updatedSegments[index] = { ...updatedSegments[index], [field]: value };

    if (field === 'speed_cm_s') {
      updatedSegments[index].speed_cpm = (value / 24) * 200;
      updatedSegments[index].speed_percentage = (value / 24) * 66.7;
    }

    if (field === 'depth_cm') {
      updatedSegments[index].depth_percentage = (value / 45.7) * 100;
    }

    setSegments(updatedSegments);
  };

  // Exporter le pattern en JSON
  const exportPattern = async () => {
    const pattern = {
      name: patternName,
      settings: {
        stroke_percentage: segments.length > 0 ? segments[0].depth_percentage : 50,
        aux_1: {
          enabled: pumpEnabled,
          squirt_ml: parseFloat(pumpSquirtMl),
          squirt_frequency: pumpFrequency,
        },
        aux_2: "OFF",
      },
      segments: segments.map(segment => ({
        speed_percentage: segment.speed_percentage,
        speed_cpm: segment.speed_cpm,
        depth_percentage: segment.depth_percentage,
        duration_seconds: parseInt(segment.duration_seconds),
        random_pause_after: segment.random_pause_after,
        random_pause_duration: segment.random_pause_after ? parseInt(segment.random_pause_duration) : 0,
        pause_between: parseInt(segment.pause_between),
      })),
      total_duration_seconds: parseInt(totalDuration),
    };

    const json = JSON.stringify(pattern, null, 2);
    const path = `${RNFS.DocumentDirectoryPath}/pattern_${patternName}.json`;

    try {
      await RNFS.writeFile(path, json, 'utf8');
      Alert.alert('Succès', `Pattern exporté à ${path}. Importez-le dans MyFY via Patterns > Import Pattern.`);
    } catch (error) {
      Alert.alert('Erreur', 'Échec de l’exportation du pattern : ' + error.message);
    }
  };

  // Importer un pattern depuis un fichier JSON
  const importPattern = async () => {
    try {
      const res = await DocumentPicker.pick({
        type: [DocumentPicker.types.allFiles],
      });
      const fileContent = await RNFS.readFile(res.uri, 'utf8');
      const pattern = JSON.parse(fileContent);

      setPatternName(pattern.name);
      setTotalDuration(pattern.total_duration_seconds.toString());
      setPumpEnabled(pattern.settings.aux_1.enabled);
      setPumpSquirtMl(pattern.settings.aux_1.squirt_ml.toString());
      setPumpFrequency(pattern.settings.aux_1.squirt_frequency);

      const importedSegments = pattern.segments.map(segment => ({
        speed_cm_s: (segment.speed_cpm / 200) * 24, // Conversion CPM en cm/s
        speed_cpm: segment.speed_cpm,
        speed_percentage: segment.speed_percentage,
        depth_cm: (segment.depth_percentage / 100) * 45.7, // Conversion % en cm
        depth_percentage: segment.depth_percentage,
        duration_seconds: segment.duration_seconds,
        random_pause_after: segment.random_pause_after,
        random_pause_duration: segment.random_pause_duration,
        pause_between: segment.pause_between,
      }));

      setSegments(importedSegments);
      Alert.alert('Succès', 'Pattern importé avec succès !');
    } catch (error) {
      if (DocumentPicker.isCancel(error)) {
        Alert.alert('Annulé', 'Importation annulée.');
      } else {
        Alert.alert('Erreur', 'Échec de l’importation : ' + error.message);
      }
    }
  };

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.title}>Pattern Creator for FY500</Text>

      {/* Nom du pattern */}
      <Text>Nom du pattern :</Text>
      <TextInput
        style={styles.input}
        value={patternName}
        onChangeText={setPatternName}
        placeholder="Custom Pattern"
      />

      {/* Durée totale */}
      <Text>Durée totale (sec) :</Text>
      <TextInput
        style={styles.input}
        value={totalDuration.toString()}
        onChangeText={setTotalDuration}
        keyboardType="numeric"
        placeholder="300"
      />

      {/* Pompe à lubrifiant */}
      <Text>Pompe à lubrifiant (Aux 1) :</Text>
      <Switch value={pumpEnabled} onValueChange={setPumpEnabled} />
      {pumpEnabled && (
        <>
          <Text>Quantité par squirt (mL) :</Text>
          <TextInput
            style={styles.input}
            value={pumpSquirtMl.toString()}
            onChangeText={setPumpSquirtMl}
            keyboardType="numeric"
            placeholder="2"
          />
          <Text>Fréquence :</Text>
          <TextInput
            style={styles.input}
            value={pumpFrequency}
            onChangeText={setPumpFrequency}
            placeholder="per_thrust"
          />
        </>
      )}

      {/* Liste des segments */}
      {segments.map((segment, index) => (
        <View key={index} style={styles.segment}>
          <Text style={styles.segmentTitle}>Segment {index + 1}</Text>
          <Text>Vitesse (0-24 cm/s) :</Text>
          <Slider
            minimumValue={0}
            maximumValue={24}
            value={segment.speed_cm_s}
            onValueChange={(value) => updateSegment(index, 'speed_cm_s', value)}
          />
          <Text>Profondeur (0-45.7 cm) :</Text>
          <Slider
            minimumValue={0}
            maximumValue={45.7}
            value={segment.depth_cm}
            onValueChange={(value) => updateSegment(index, 'depth_cm', value)}
          />
          <Text>Durée (sec) :</Text>
          <TextInput
            style={styles.input}
            value={segment.duration_seconds.toString()}
            onChangeText={(value) => updateSegment(index, 'duration_seconds', value)}
            keyboardType="numeric"
          />
          <Text>Pause aléatoire après :</Text>
          <Switch
            value={segment.random_pause_after}
            onValueChange={(value) => updateSegment(index, 'random_pause_after', value)}
          />
          {segment.random_pause_after && (
            <>
              <Text>Durée max de la pause aléatoire (sec) :</Text>
              <TextInput
                style={styles.input}
                value={segment.random_pause_duration.toString()}
                onChangeText={(value) => updateSegment(index, 'random_pause_duration', value)}
                keyboardType="numeric"
              />
            </>
          )}
          <Text>Pause fixe avant le prochain segment (sec) :</Text>
          <TextInput
            style={styles.input}
            value={segment.pause_between.toString()}
            onChangeText={(value) => updateSegment(index, 'pause_between', value)}
            keyboardType="numeric"
          />
          <Button title="Supprimer Segment" onPress={() => removeSegment(index)} color="red" />
        </View>
      ))}

      {/* Boutons pour ajouter et importer */}
      <Button title="Ajouter un Segment" onPress={addSegment} />
      <Button title="Importer Pattern" onPress={importPattern} />
      <Button title="Exporter Pattern en JSON" onPress={exportPattern} />

    </ScrollView>
  );
};

// Styles (inchangés)
const styles = StyleSheet.create({
  container: {
    padding: 20,
    backgroundColor: '#f5f5f5',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 20,
    textAlign: 'center',
  },
  input: {
    borderWidth: 1,
    borderColor: '#ccc',
    padding: 10,
    marginVertical: 5,
    borderRadius: 5,
  },
  segment: {
    marginVertical: 10,
    padding: 10,
    backgroundColor: '#fff',
    borderRadius: 5,
    borderWidth: 1,
    borderColor: '#ccc',
  },
  segmentTitle: {
    fontSize: 18,
    fontWeight: 'bold',
  },
});

export default PatternCreator;