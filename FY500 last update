import React, { useState, useCallback, useMemo, useEffect } from 'react';
import {
  View,
  Text,
  TextInput,
  Slider,
  Button,
  Switch,
  ScrollView,
  StyleSheet,
  Alert,
  Platform,
  useColorScheme,
  Picker,
} from 'react-native';
import RNFS from 'react-native-fs';
import DocumentPicker from 'react-native-document-picker';
import axios from 'axios';
import { GestureHandlerRootView, PanGestureHandler } from 'react-native-gesture-handler';
import Animated, { useSharedValue, useAnimatedStyle, withSpring } from 'react-native-reanimated';
import { LineChart } from 'react-native-svg-charts';
import * as shape from 'd3-shape';
import { useTranslation } from 'react-i18next';
import { useReducer } from 'react';
import i18n from './i18n';

// Validation utility
const validateNumericInput = (value, min, max, fieldName, t) => {
  const numValue = parseFloat(value);
  if (isNaN(numValue) || numValue < min || numValue > max) {
    Alert.alert(t('Invalid Input'), `${fieldName} must be between ${min} and ${max}.`);
    return false;
  }
  return true;
};

// Undo/Redo Reducer
const historyReducer = (state, action) => {
  switch (action.type) {
    case 'ADD':
      return {
        past: [...state.past, state.present],
        present: action.newState,
        future: [],
      };
    case 'UNDO':
      const previous = state.past[state.past.length - 1];
      const newPast = state.past.slice(0, -1);
      return {
        past: newPast,
        present: previous,
        future: [state.present, ...state.future],
      };
    case 'REDO':
      const next = state.future[0];
      const newFuture = state.future.slice(1);
      return {
        past: [...state.past, state.present],
        present: next,
        future: newFuture,
      };
    default:
      return state;
  }
};

// Reusable SliderInput component
const SliderInput = ({ label, value, onValueChange, min, max, t }) => (
  <View>
    <Text>{label}</Text>
    <Text>{value.toFixed(2)}</Text>
    <Slider
      minimumValue={min}
      maximumValue={max}
      value={value}
      onValueChange={onValueChange}
    />
  </View>
);

// Reusable NumericInput component
const NumericInput = ({ label, value, onChangeText, placeholder, validate, t }) => (
  <View>
    <Text>{label}</Text>
    <TextInput
      style={styles.input}
      value={value.toString()}
      onChangeText={(val) => {
        if (validate && !validate(val)) return;
        onChangeText(val);
      }}
      keyboardType="numeric"
      placeholder={placeholder}
    />
  </View>
);

const PatternCreator = () => {
  const { t } = useTranslation();
  const colorScheme = useColorScheme();
  const [patternName, setPatternName] = useState('Custom Pattern');
  const [totalDuration, setTotalDuration] = useState('300');
  const [pumpEnabled, setPumpEnabled] = useState(true);
  const [pumpSquirtMl, setPumpSquirtMl] = useState('2');
  const [pumpFrequency, setPumpFrequency] = useState('per_thrust');
  const [draggingIndex, setDraggingIndex] = useState(null);
  const [language, setLanguage] = useState('en');
  const [isApiAvailable, setIsApiAvailable] = useState(false); // État pour la disponibilité de l’API
  const [segmentsHistory, dispatchHistory] = useReducer(historyReducer, {
    past: [],
    present: [],
    future: [],
  });

  const segments = segmentsHistory.present;

  // Vérifier la disponibilité de l’API
  const checkApiAvailability = async () => {
    try {
      await axios.head('https://api.fuckyeah.uk/ping'); // Remplace par une URL de test réelle fournie par FuckYeah
      setIsApiAvailable(true);
    } catch (error) {
      setIsApiAvailable(false);
    }
  };

  // Vérifier au démarrage et toutes les 5 minutes
  useEffect(() => {
    checkApiAvailability();
    const interval = setInterval(checkApiAvailability, 300000); // 5 minutes = 300000 ms
    return () => clearInterval(interval);
  }, []);

  const changeLanguage = (lng) => {
    setLanguage(lng);
    i18n.changeLanguage(lng);
  };

  const addSegment = useCallback(() => {
    const newSegment = {
      speed_cm_s: 0,
      speed_cpm: 0,
      speed_percentage: 0,
      depth_cm: 0,
      depth_percentage: 0,
      duration_seconds: 15,
      random_pause_after: false,
      random_pause_duration: 5,
      pause_between: 3,
    };
    dispatchHistory({ type: 'ADD', newState: [...segments, newSegment] });
  }, [segments]);

  const duplicateSegment = useCallback((index) => {
    const newSegment = { ...segments[index] };
    dispatchHistory({ type: 'ADD', newState: [...segments, newSegment] });
  }, [segments]);

  const undo = useCallback(() => {
    if (segmentsHistory.past.length > 0) {
      dispatchHistory({ type: 'UNDO' });
    }
  }, [segmentsHistory]);

  const redo = useCallback(() => {
    if (segmentsHistory.future.length > 0) {
      dispatchHistory({ type: 'REDO' });
    }
  }, [segmentsHistory]);

  const updateSegment = useCallback((index, field, value) => {
    const updatedSegments = [...segments];
    updatedSegments[index] = { ...updatedSegments[index], [field]: value };

    if (field === 'speed_cm_s') {
      const speedValue = parseFloat(value);
      if (validateNumericInput(speedValue, 0, 24, t('Speed (cm/s)'), t)) {
        updatedSegments[index].speed_cpm = (speedValue / 24) * 200;
        updatedSegments[index].speed_percentage = (speedValue / 24) * 66.7;
      } else {
        return;
      }
    }

    if (field === 'depth_cm') {
      const depthValue = parseFloat(value);
      if (validateNumericInput(depthValue, 0, 45.7, t('Depth (cm)'), t)) {
        updatedSegments[index].depth_percentage = (depthValue / 45.7) * 100;
      } else {
        return;
      }
    }

    if (field === 'duration_seconds' || field === 'random_pause_duration' || field === 'pause_between') {
      const numValue = parseInt(value);
      if (validateNumericInput(numValue, 0, 3600, t('Duration (sec)'), t)) {
        updatedSegments[index][field] = numValue;
      } else {
        return;
      }
    }

    dispatchHistory({ type: 'ADD', newState: updatedSegments });
  }, [segments, t]);

  const onGestureEvent = (index, event) => {
    if (event.nativeEvent.state === 5) {
      const newIndex = Math.round(event.nativeEvent.absoluteY / 100);
      if (newIndex >= 0 && newIndex < segments.length) {
        const newSegments = [...segments];
        const [movedSegment] = newSegments.splice(index, 1);
        newSegments.splice(newIndex, 0, movedSegment);
        dispatchHistory({ type: 'ADD', newState: newSegments });
      }
      setDraggingIndex(null);
    }
  };

  const generatePattern = () => {
    return {
      name: patternName,
      settings: {
        stroke_percentage: segments.length > 0 ? segments[0].depth_percentage : 50,
        aux_1: {
          enabled: pumpEnabled,
          squirt_ml: parseFloat(pumpSquirtMl) || 2,
          squirt_frequency: pumpFrequency,
        },
        aux_2: "OFF",
      },
      segments: segments.map(segment => ({
        speed_percentage: segment.speed_percentage,
        speed_cpm: segment.speed_cpm,
        depth_percentage: segment.depth_percentage,
        duration_seconds: parseInt(segment.duration_seconds) || 15,
        random_pause_after: segment.random_pause_after,
        random_pause_duration: segment.random_pause_after ? (parseInt(segment.random_pause_duration) || 5) : 0,
        pause_between: parseInt(segment.pause_between) || 3,
      })),
      total_duration_seconds: parseInt(totalDuration) || 300,
    };
  };

  const exportPattern = async () => {
    const pattern = generatePattern();
    const json = JSON.stringify(pattern, null, 2);
    const path = Platform.select({
      ios: `${RNFS.DocumentDirectoryPath}/pattern_${patternName}.json`,
      android: `${RNFS.ExternalStorageDirectoryPath}/pattern_${patternName}.json`,
    });

    try {
      await RNFS.writeFile(path, json, 'utf8');
      Alert.alert(t('Success'), t('Pattern exported successfully to') + ` ${path}`);
    } catch (error) {
      Alert.alert(t('Export Failed'), t('Failed to export pattern:') + ` ${error.message}`);
    }
  };

  const importPattern = async () => {
    try {
      const res = await DocumentPicker.pick({
        type: [DocumentPicker.types.allFiles],
      });
      const fileContent = await RNFS.readFile(res.uri, 'utf8');
      const pattern = JSON.parse(fileContent);

      if (!pattern.name || !pattern.settings || !pattern.segments || !Array.isArray(pattern.segments)) {
        throw new Error(t('Invalid JSON structure'));
      }

      setPatternName(pattern.name);
      setTotalDuration(pattern.total_duration_seconds.toString());
      setPumpEnabled(pattern.settings.aux_1.enabled);
      setPumpSquirtMl(pattern.settings.aux_1.squirt_ml.toString());
      setPumpFrequency(pattern.settings.aux_1.squirt_frequency);

      const importedSegments = pattern.segments.map(segment => ({
        speed_cm_s: (segment.speed_cpm / 200) * 24,
        speed_cpm: segment.speed_cpm,
        speed_percentage: segment.speed_percentage,
        depth_cm: (segment.depth_percentage / 100) * 45.7,
        depth_percentage: segment.depth_percentage,
        duration_seconds: segment.duration_seconds,
        random_pause_after: segment.random_pause_after,
        random_pause_duration: segment.random_pause_duration,
        pause_between: segment.pause_between,
      }));

      dispatchHistory({ type: 'ADD', newState: importedSegments });
      Alert.alert(t('Success'), t('Pattern imported successfully'));
    } catch (error) {
      if (DocumentPicker.isCancel(error)) {
        Alert.alert(t('Cancelled'), t('Import cancelled'));
      } else {
        Alert.alert(t('Import Failed'), t('Failed to import pattern:') + ` ${error.message}`);
      }
    }
  };

  const syncPatternWithFY500 = async () => {
    const pattern = generatePattern();
    try {
      const response = await axios.post('https://api.fuckyeah.uk/sync-pattern', pattern, {
        headers: { 'Content-Type': 'application/json' },
      });
      Alert.alert(t('Success'), t('Pattern synced with FY500'));
    } catch (error) {
      Alert.alert(t('Sync Failed'), t('Failed to sync with FY500:') + ` ${error.message}`);
    }
  };

  const speedData = useMemo(() => segments.map(s => s.speed_cm_s), [segments]);
  const depthData = useMemo(() => segments.map(s => s.depth_cm), [segments]);

  const renderPatternGraph = () => {
    return (
      <View style={styles.graphContainer}>
        <Text style={styles.graphTitle}>{t('Pattern Preview')}</Text>
        <LineChart
          style={styles.graph}
          data={speedData}
          svg={{ stroke: 'rgb(134, 65, 244)' }}
          contentInset={{ top: 20, bottom: 20 }}
          curve={shape.curveLinear}
        />
        <LineChart
          style={styles.graph}
          data={depthData}
          svg={{ stroke: 'rgb(255, 99, 132)' }}
          contentInset={{ top: 20, bottom: 20 }}
          curve={shape.curveLinear}
        />
        <Text>{t('Blue: Speed, Red: Depth')}</Text>
      </View>
    );
  };

  return (
    <GestureHandlerRootView style={{ flex: 1 }}>
      <ScrollView
        style={[
          styles.container,
          { backgroundColor: colorScheme === 'dark' ? '#333' : '#f5f5f5' },
        ]}
      >
        <Text style={styles.title}>{t('Pattern Creator')}</Text>

        <Text>{t('Select Language')}</Text>
        <Picker
          selectedValue={language}
          style={styles.picker}
          onValueChange={(itemValue) => changeLanguage(itemValue)}
        >
          <Picker.Item label={t('English')} value="en" />
          <Picker.Item label={t('French')} value="fr" />
          <Picker.Item label={t('German')} value="de" />
        </Picker>

        <NumericInput
          label={t('Pattern Name')}
          value={patternName}
          onChangeText={setPatternName}
          placeholder={t('Enter pattern name')}
          t={t}
        />

        <NumericInput
          label={t('Total Duration (sec)')}
          value={totalDuration}
          onChangeText={setTotalDuration}
          placeholder="300"
          validate={(value) => validateNumericInput(value, 1, 10000, t('Total Duration (sec)'), t)}
          t={t}
        />

        <Text>{t('Lubricant Pump (Aux 1)')}</Text>
        <Switch value={pumpEnabled} onValueChange={setPumpEnabled} />
        {pumpEnabled && (
          <>
            <NumericInput
              label={t('Amount per Squirt (mL)')}
              value={pumpSquirtMl}
              onChangeText={setPumpSquirtMl}
              placeholder="2"
              validate={(value) => validateNumericInput(value, 0, 10, t('Amount per Squirt (mL)'), t)}
              t={t}
            />
            <NumericInput
              label={t('Frequency')}
              value={pumpFrequency}
              onChangeText={setPumpFrequency}
              placeholder="per_thrust"
              t={t}
            />
          </>
        )}

        <Button title={t('Undo')} onPress={undo} disabled={segmentsHistory.past.length === 0} />
        <Button title={t('Redo')} onPress={redo} disabled={segmentsHistory.future.length === 0} />

        {segments.length > 0 && renderPatternGraph()}

        {segments.map((segment, index) => (
          <PanGestureHandler
            key={index}
            onGestureEvent={(event) => onGestureEvent(index, event)}
            onHandlerStateChange={(event) => {
              if (event.nativeEvent.state === 2) setDraggingIndex(index);
            }}
          >
            <Animated.View style={styles.segment}>
              <Text style={styles.segmentTitle}>{t('Segment')} {index + 1}</Text>
              <SliderInput
                label={t('Speed (cm/s)')}
                value={segment.speed_cm_s}
                onValueChange={(value) => updateSegment(index, 'speed_cm_s', value)}
                min={0}
                max={24}
                t={t}
              />
              <SliderInput
                label={t('Depth (cm)')}
                value={segment.depth_cm}
                onValueChange={(value) => updateSegment(index, 'depth_cm', value)}
                min={0}
                max={45.7}
                t={t}
              />
              <NumericInput
                label={t('Duration (sec)')}
                value={segment.duration_seconds}
                onChangeText={(value) => updateSegment(index, 'duration_seconds', value)}
                placeholder="15"
                validate={(value) => validateNumericInput(value, 1, 3600, t('Duration (sec)'), t)}
                t={t}
              />
              <Text>{t('Random Pause After')}</Text>
              <Switch
                value={segment.random_pause_after}
                onValueChange={(value) => updateSegment(index, 'random_pause_after', value)}
              />
              {segment.random_pause_after && (
                <NumericInput
                  label={t('Max Random Pause Duration (sec)')}
                  value={segment.random_pause_duration}
                  onChangeText={(value) => updateSegment(index, 'random_pause_duration', value)}
                  placeholder="5"
                  validate={(value) => validateNumericInput(value, 0, 60, t('Max Random Pause Duration (sec)'), t)}
                  t={t}
                />
              )}
              <NumericInput
                label={t('Fixed Pause Before Next Segment (sec)')}
                value={segment.pause_between}
                onChangeText={(value) => updateSegment(index, 'pause_between', value)}
                placeholder="3"
                validate={(value) => validateNumericInput(value, 0, 60, t('Fixed Pause Before Next Segment (sec)'), t)}
                t={t}
              />
              <Button title={t('Duplicate Segment')} onPress={() => duplicateSegment(index)} />
              <Button title={t('Remove Segment')} onPress={() => removeSegment(index)} color="red" />
            </Animated.View>
          </PanGestureHandler>
        ))}

        <Button title={t('Add Segment')} onPress={addSegment} />
        <Button title={t('Import Pattern')} onPress={importPattern} />
        <Button title={t('Export Pattern')} onPress={exportPattern} />
        <View style={styles.syncButtonContainer}>
          <Button
            title={t('Sync with FY500')}
            onPress={syncPatternWithFY500}
            disabled={!isApiAvailable} // Activer le bouton si l’API est disponible
          />
          <Text style={styles.note}>
            {isApiAvailable ? t('API is available') : t('Sync disabled until FY500 API is available')}
          </Text>
        </View>
      </ScrollView>
    </GestureHandlerRootView>
  );
};

// Styles
const styles = StyleSheet.create({
  container: {
    padding: 20,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 20,
    textAlign: 'center',
  },
  picker: {
    height: 50,
    width: '100%',
    marginBottom: 20,
  },
  input: {
    borderWidth: 1,
    borderColor: '#ccc',
    padding: 10,
    marginVertical: 5,
    borderRadius: 5,
  },
  segment: {
    marginVertical: 10,
    padding: 10,
    backgroundColor: '#fff',
    borderRadius: 5,
    borderWidth: 1,
    borderColor: '#ccc',
  },
  segmentTitle: {
    fontSize: 18,
    fontWeight: 'bold',
  },
  graphContainer: {
    marginVertical: 20,
  },
  graphTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    textAlign: 'center',
  },
  graph: {
    height: 100,
    marginVertical: 10,
  },
  syncButtonContainer: {
    marginVertical: 10,
  },
  note: {
    fontSize: 12,
    color: '#888',
    textAlign: 'center',
    marginTop: 5,
  },
});

export default PatternCreator;